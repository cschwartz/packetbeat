// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// See the file LICENSE.goloxi which should have been included in the source distribution

// Automatically generated by LOXI from template module.go
// Do not modify

package openflow

import (
  "bytes"
  "encoding/binary"
  "github.com/elastic/libbeat/common"
)

type of_port_desc struct {
	port_no    uint16
	hw_addr    [6]uint16
	name       [16]uint8
	config     ofp_port_config
	state      ofp_port_state
	curr       ofp_port_features
	advertised ofp_port_features
	supported  ofp_port_features
	peer       ofp_port_features
	curr_speed uint32
	max_speed  uint32
}

var OpenFlowPacketTypes map[ofp_type]OpenFlowContent = map[ofp_type]OpenFlowContent{
  OFPT_STATS_REPLY: new(stats_reply),
  OFPT_STATS_REQUEST: new(stats_request),
  OFPT_ERROR: new(error_msg),
  OFPT_BARRIER_REPLY: new(barrier_reply),
  OFPT_BARRIER_REQUEST: new(barrier_request),
  OFPT_EXPERIMENTER: new(experimenter),
  OFPT_ECHO_REPLY: new(echo_reply),
  OFPT_ECHO_REQUEST: new(echo_request),
  OFPT_FEATURES_REPLY: new(features_reply),
  OFPT_FEATURES_REQUEST: new(features_request),
  OFPT_FLOW_MOD: new(flow_mod),
  OFPT_FLOW_REMOVED: new(flow_removed),
  OFPT_GET_CONFIG_REPLY: new(get_config_reply),
  OFPT_GET_CONFIG_REQUEST: new(get_config_request),
  OFPT_HELLO: new(hello),
  OFPT_PACKET_IN: new(packet_in),
  OFPT_PACKET_OUT: new(packet_out),
  OFPT_PORT_MOD: new(port_mod),
  OFPT_PORT_STATUS: new(port_status),
  OFPT_QUEUE_GET_CONFIG_REPLY: new(queue_get_config_reply),
  OFPT_QUEUE_GET_CONFIG_REQUEST: new(queue_get_config_request),
  OFPT_SET_CONFIG: new(set_config),
}

type message struct {
}

func (m *message) parse(data []byte) {
}

func (m message) fillOutEvent(event *common.MapStr) {
}
type stats_reply struct {
  stats_type ofp_stats_type
  flags ofp_stats_reply_flags
}

func (m *stats_reply) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.stats_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.flags)
}

func (m stats_reply) fillOutEvent(event *common.MapStr) {
  (*event)["stats_type"] = m.stats_type.String()
  (*event)["flags"] = m.flags.String()
}
type aggregate_stats_reply struct {
  stats_type uint16
  flags ofp_stats_reply_flags
  packet_count uint64
  byte_count uint64
  flow_count uint32
}

func (m *aggregate_stats_reply) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.stats_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.flags)
  binary.Read(bytes.NewReader(data[12:20]), binary.BigEndian, &m.packet_count)
  binary.Read(bytes.NewReader(data[20:28]), binary.BigEndian, &m.byte_count)
  binary.Read(bytes.NewReader(data[28:32]), binary.BigEndian, &m.flow_count)
}

func (m aggregate_stats_reply) fillOutEvent(event *common.MapStr) {
  (*event)["stats_type"] = m.stats_type
  (*event)["flags"] = m.flags.String()
  (*event)["packet_count"] = m.packet_count
  (*event)["byte_count"] = m.byte_count
  (*event)["flow_count"] = m.flow_count
}
type stats_request struct {
  stats_type ofp_stats_type
  flags ofp_stats_request_flags
}

func (m *stats_request) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.stats_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.flags)
}

func (m stats_request) fillOutEvent(event *common.MapStr) {
  (*event)["stats_type"] = m.stats_type.String()
  (*event)["flags"] = m.flags
}
type aggregate_stats_request struct {
  stats_type uint16
  flags ofp_stats_request_flags
  match match_v1
  table_id uint8
  out_port uint16
}

func (m *aggregate_stats_request) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.stats_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.flags)
  binary.Read(bytes.NewReader(data[12:52]), binary.BigEndian, &m.match)
  binary.Read(bytes.NewReader(data[52:53]), binary.BigEndian, &m.table_id)
  binary.Read(bytes.NewReader(data[54:56]), binary.BigEndian, &m.out_port)
}

func (m aggregate_stats_request) fillOutEvent(event *common.MapStr) {
  (*event)["stats_type"] = m.stats_type
  (*event)["flags"] = m.flags
  (*event)["match"] = m.match
  (*event)["table_id"] = m.table_id
  (*event)["out_port"] = m.out_port
}
type error_msg struct {
  err_type uint16
}

func (m *error_msg) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.err_type)
}

func (m error_msg) fillOutEvent(event *common.MapStr) {
  (*event)["err_type"] = m.err_type
}
type bad_action_error_msg struct {
  err_type uint16
  code ofp_bad_action_code
  data []byte
}

func (m *bad_action_error_msg) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.err_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.code)
  binary.Read(bytes.NewReader(data[12:len(data)]), binary.BigEndian, &m.data)
}

func (m bad_action_error_msg) fillOutEvent(event *common.MapStr) {
  (*event)["err_type"] = m.err_type
  (*event)["code"] = m.code.String()
}
type bad_request_error_msg struct {
  err_type uint16
  code ofp_bad_request_code
  data []byte
}

func (m *bad_request_error_msg) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.err_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.code)
  binary.Read(bytes.NewReader(data[12:len(data)]), binary.BigEndian, &m.data)
}

func (m bad_request_error_msg) fillOutEvent(event *common.MapStr) {
  (*event)["err_type"] = m.err_type
  (*event)["code"] = m.code.String()
}
type barrier_reply struct {
}

func (m *barrier_reply) parse(data []byte) {
}

func (m barrier_reply) fillOutEvent(event *common.MapStr) {
}
type barrier_request struct {
}

func (m *barrier_request) parse(data []byte) {
}

func (m barrier_request) fillOutEvent(event *common.MapStr) {
}
type experimenter struct {
  experimenter uint32
  data []byte
}

func (m *experimenter) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:12]), binary.BigEndian, &m.experimenter)
  binary.Read(bytes.NewReader(data[12:len(data)]), binary.BigEndian, &m.data)
}

func (m experimenter) fillOutEvent(event *common.MapStr) {
  (*event)["experimenter"] = m.experimenter
}
type experimenter_stats_reply struct {
  stats_type uint16
  flags ofp_stats_reply_flags
  experimenter uint32
  data []byte
}

func (m *experimenter_stats_reply) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.stats_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.flags)
  binary.Read(bytes.NewReader(data[12:16]), binary.BigEndian, &m.experimenter)
  binary.Read(bytes.NewReader(data[16:len(data)]), binary.BigEndian, &m.data)
}

func (m experimenter_stats_reply) fillOutEvent(event *common.MapStr) {
  (*event)["stats_type"] = m.stats_type
  (*event)["flags"] = m.flags.String()
  (*event)["experimenter"] = m.experimenter
}
type experimenter_stats_request struct {
  stats_type uint16
  flags ofp_stats_request_flags
  experimenter uint32
  data []byte
}

func (m *experimenter_stats_request) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.stats_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.flags)
  binary.Read(bytes.NewReader(data[12:16]), binary.BigEndian, &m.experimenter)
  binary.Read(bytes.NewReader(data[16:len(data)]), binary.BigEndian, &m.data)
}

func (m experimenter_stats_request) fillOutEvent(event *common.MapStr) {
  (*event)["stats_type"] = m.stats_type
  (*event)["flags"] = m.flags
  (*event)["experimenter"] = m.experimenter
}
type desc_stats_reply struct {
  stats_type uint16
  flags ofp_stats_reply_flags
  mfr_desc [256]byte
  hw_desc [256]byte
  sw_desc [256]byte
  serial_num [32]byte
  dp_desc [256]byte
}

func (m *desc_stats_reply) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.stats_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.flags)
  binary.Read(bytes.NewReader(data[12:268]), binary.BigEndian, &m.mfr_desc)
  binary.Read(bytes.NewReader(data[268:524]), binary.BigEndian, &m.hw_desc)
  binary.Read(bytes.NewReader(data[524:780]), binary.BigEndian, &m.sw_desc)
  binary.Read(bytes.NewReader(data[780:812]), binary.BigEndian, &m.serial_num)
  binary.Read(bytes.NewReader(data[812:1068]), binary.BigEndian, &m.dp_desc)
}

func (m desc_stats_reply) fillOutEvent(event *common.MapStr) {
  (*event)["stats_type"] = m.stats_type
  (*event)["flags"] = m.flags.String()
  (*event)["mfr_desc"] = m.mfr_desc
  (*event)["hw_desc"] = m.hw_desc
  (*event)["sw_desc"] = m.sw_desc
  (*event)["serial_num"] = m.serial_num
  (*event)["dp_desc"] = m.dp_desc
}
type desc_stats_request struct {
  stats_type uint16
  flags ofp_stats_request_flags
}

func (m *desc_stats_request) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.stats_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.flags)
}

func (m desc_stats_request) fillOutEvent(event *common.MapStr) {
  (*event)["stats_type"] = m.stats_type
  (*event)["flags"] = m.flags
}
type echo_reply struct {
  data []byte
}

func (m *echo_reply) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:len(data)]), binary.BigEndian, &m.data)
}

func (m echo_reply) fillOutEvent(event *common.MapStr) {
}
type echo_request struct {
  data []byte
}

func (m *echo_request) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:len(data)]), binary.BigEndian, &m.data)
}

func (m echo_request) fillOutEvent(event *common.MapStr) {
}
type features_reply struct {
  datapath_id uint64
  n_buffers uint32
  n_tables uint8
  capabilities ofp_capabilities
  actions uint32
}

func (m *features_reply) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:16]), binary.BigEndian, &m.datapath_id)
  binary.Read(bytes.NewReader(data[16:20]), binary.BigEndian, &m.n_buffers)
  binary.Read(bytes.NewReader(data[20:21]), binary.BigEndian, &m.n_tables)
  binary.Read(bytes.NewReader(data[24:28]), binary.BigEndian, &m.capabilities)
  binary.Read(bytes.NewReader(data[28:32]), binary.BigEndian, &m.actions)
// ignore ports for the moment
}

func (m features_reply) fillOutEvent(event *common.MapStr) {
  (*event)["datapath_id"] = m.datapath_id
  (*event)["n_buffers"] = m.n_buffers
  (*event)["n_tables"] = m.n_tables
  (*event)["capabilities"] = m.capabilities.String()
  (*event)["actions"] = m.actions
  // ignore ports for the moment
}
type features_request struct {
}

func (m *features_request) parse(data []byte) {
}

func (m features_request) fillOutEvent(event *common.MapStr) {
}
type flow_mod struct {
  match match_v1
  cookie uint64
  _command uint16
  idle_timeout uint16
  hard_timeout uint16
  priority uint16
  buffer_id uint32
  out_port uint16
  flags ofp_flow_mod_flags
}

func (m *flow_mod) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:48]), binary.BigEndian, &m.match)
  binary.Read(bytes.NewReader(data[48:56]), binary.BigEndian, &m.cookie)
  binary.Read(bytes.NewReader(data[56:58]), binary.BigEndian, &m._command)
  binary.Read(bytes.NewReader(data[58:60]), binary.BigEndian, &m.idle_timeout)
  binary.Read(bytes.NewReader(data[60:62]), binary.BigEndian, &m.hard_timeout)
  binary.Read(bytes.NewReader(data[62:64]), binary.BigEndian, &m.priority)
  binary.Read(bytes.NewReader(data[64:68]), binary.BigEndian, &m.buffer_id)
  binary.Read(bytes.NewReader(data[68:70]), binary.BigEndian, &m.out_port)
  binary.Read(bytes.NewReader(data[70:72]), binary.BigEndian, &m.flags)
// ignore actions for the moment
}

func (m flow_mod) fillOutEvent(event *common.MapStr) {
  (*event)["match"] = m.match
  (*event)["cookie"] = m.cookie
  (*event)["_command"] = m._command
  (*event)["idle_timeout"] = m.idle_timeout
  (*event)["hard_timeout"] = m.hard_timeout
  (*event)["priority"] = m.priority
  (*event)["buffer_id"] = m.buffer_id
  (*event)["out_port"] = m.out_port
  (*event)["flags"] = m.flags.String()
  // ignore actions for the moment
}
type flow_add struct {
  match match_v1
  cookie uint64
  _command uint16
  idle_timeout uint16
  hard_timeout uint16
  priority uint16
  buffer_id uint32
  out_port uint16
  flags ofp_flow_mod_flags
}

func (m *flow_add) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:48]), binary.BigEndian, &m.match)
  binary.Read(bytes.NewReader(data[48:56]), binary.BigEndian, &m.cookie)
  binary.Read(bytes.NewReader(data[56:58]), binary.BigEndian, &m._command)
  binary.Read(bytes.NewReader(data[58:60]), binary.BigEndian, &m.idle_timeout)
  binary.Read(bytes.NewReader(data[60:62]), binary.BigEndian, &m.hard_timeout)
  binary.Read(bytes.NewReader(data[62:64]), binary.BigEndian, &m.priority)
  binary.Read(bytes.NewReader(data[64:68]), binary.BigEndian, &m.buffer_id)
  binary.Read(bytes.NewReader(data[68:70]), binary.BigEndian, &m.out_port)
  binary.Read(bytes.NewReader(data[70:72]), binary.BigEndian, &m.flags)
// ignore actions for the moment
}

func (m flow_add) fillOutEvent(event *common.MapStr) {
  (*event)["match"] = m.match
  (*event)["cookie"] = m.cookie
  (*event)["_command"] = m._command
  (*event)["idle_timeout"] = m.idle_timeout
  (*event)["hard_timeout"] = m.hard_timeout
  (*event)["priority"] = m.priority
  (*event)["buffer_id"] = m.buffer_id
  (*event)["out_port"] = m.out_port
  (*event)["flags"] = m.flags.String()
  // ignore actions for the moment
}
type flow_delete struct {
  match match_v1
  cookie uint64
  _command uint16
  idle_timeout uint16
  hard_timeout uint16
  priority uint16
  buffer_id uint32
  out_port uint16
  flags ofp_flow_mod_flags
}

func (m *flow_delete) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:48]), binary.BigEndian, &m.match)
  binary.Read(bytes.NewReader(data[48:56]), binary.BigEndian, &m.cookie)
  binary.Read(bytes.NewReader(data[56:58]), binary.BigEndian, &m._command)
  binary.Read(bytes.NewReader(data[58:60]), binary.BigEndian, &m.idle_timeout)
  binary.Read(bytes.NewReader(data[60:62]), binary.BigEndian, &m.hard_timeout)
  binary.Read(bytes.NewReader(data[62:64]), binary.BigEndian, &m.priority)
  binary.Read(bytes.NewReader(data[64:68]), binary.BigEndian, &m.buffer_id)
  binary.Read(bytes.NewReader(data[68:70]), binary.BigEndian, &m.out_port)
  binary.Read(bytes.NewReader(data[70:72]), binary.BigEndian, &m.flags)
// ignore actions for the moment
}

func (m flow_delete) fillOutEvent(event *common.MapStr) {
  (*event)["match"] = m.match
  (*event)["cookie"] = m.cookie
  (*event)["_command"] = m._command
  (*event)["idle_timeout"] = m.idle_timeout
  (*event)["hard_timeout"] = m.hard_timeout
  (*event)["priority"] = m.priority
  (*event)["buffer_id"] = m.buffer_id
  (*event)["out_port"] = m.out_port
  (*event)["flags"] = m.flags.String()
  // ignore actions for the moment
}
type flow_delete_strict struct {
  match match_v1
  cookie uint64
  _command uint16
  idle_timeout uint16
  hard_timeout uint16
  priority uint16
  buffer_id uint32
  out_port uint16
  flags ofp_flow_mod_flags
}

func (m *flow_delete_strict) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:48]), binary.BigEndian, &m.match)
  binary.Read(bytes.NewReader(data[48:56]), binary.BigEndian, &m.cookie)
  binary.Read(bytes.NewReader(data[56:58]), binary.BigEndian, &m._command)
  binary.Read(bytes.NewReader(data[58:60]), binary.BigEndian, &m.idle_timeout)
  binary.Read(bytes.NewReader(data[60:62]), binary.BigEndian, &m.hard_timeout)
  binary.Read(bytes.NewReader(data[62:64]), binary.BigEndian, &m.priority)
  binary.Read(bytes.NewReader(data[64:68]), binary.BigEndian, &m.buffer_id)
  binary.Read(bytes.NewReader(data[68:70]), binary.BigEndian, &m.out_port)
  binary.Read(bytes.NewReader(data[70:72]), binary.BigEndian, &m.flags)
// ignore actions for the moment
}

func (m flow_delete_strict) fillOutEvent(event *common.MapStr) {
  (*event)["match"] = m.match
  (*event)["cookie"] = m.cookie
  (*event)["_command"] = m._command
  (*event)["idle_timeout"] = m.idle_timeout
  (*event)["hard_timeout"] = m.hard_timeout
  (*event)["priority"] = m.priority
  (*event)["buffer_id"] = m.buffer_id
  (*event)["out_port"] = m.out_port
  (*event)["flags"] = m.flags.String()
  // ignore actions for the moment
}
type flow_mod_failed_error_msg struct {
  err_type uint16
  code ofp_flow_mod_failed_code
  data []byte
}

func (m *flow_mod_failed_error_msg) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.err_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.code)
  binary.Read(bytes.NewReader(data[12:len(data)]), binary.BigEndian, &m.data)
}

func (m flow_mod_failed_error_msg) fillOutEvent(event *common.MapStr) {
  (*event)["err_type"] = m.err_type
  (*event)["code"] = m.code.String()
}
type flow_modify struct {
  match match_v1
  cookie uint64
  _command uint16
  idle_timeout uint16
  hard_timeout uint16
  priority uint16
  buffer_id uint32
  out_port uint16
  flags ofp_flow_mod_flags
}

func (m *flow_modify) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:48]), binary.BigEndian, &m.match)
  binary.Read(bytes.NewReader(data[48:56]), binary.BigEndian, &m.cookie)
  binary.Read(bytes.NewReader(data[56:58]), binary.BigEndian, &m._command)
  binary.Read(bytes.NewReader(data[58:60]), binary.BigEndian, &m.idle_timeout)
  binary.Read(bytes.NewReader(data[60:62]), binary.BigEndian, &m.hard_timeout)
  binary.Read(bytes.NewReader(data[62:64]), binary.BigEndian, &m.priority)
  binary.Read(bytes.NewReader(data[64:68]), binary.BigEndian, &m.buffer_id)
  binary.Read(bytes.NewReader(data[68:70]), binary.BigEndian, &m.out_port)
  binary.Read(bytes.NewReader(data[70:72]), binary.BigEndian, &m.flags)
// ignore actions for the moment
}

func (m flow_modify) fillOutEvent(event *common.MapStr) {
  (*event)["match"] = m.match
  (*event)["cookie"] = m.cookie
  (*event)["_command"] = m._command
  (*event)["idle_timeout"] = m.idle_timeout
  (*event)["hard_timeout"] = m.hard_timeout
  (*event)["priority"] = m.priority
  (*event)["buffer_id"] = m.buffer_id
  (*event)["out_port"] = m.out_port
  (*event)["flags"] = m.flags.String()
  // ignore actions for the moment
}
type flow_modify_strict struct {
  match match_v1
  cookie uint64
  _command uint16
  idle_timeout uint16
  hard_timeout uint16
  priority uint16
  buffer_id uint32
  out_port uint16
  flags ofp_flow_mod_flags
}

func (m *flow_modify_strict) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:48]), binary.BigEndian, &m.match)
  binary.Read(bytes.NewReader(data[48:56]), binary.BigEndian, &m.cookie)
  binary.Read(bytes.NewReader(data[56:58]), binary.BigEndian, &m._command)
  binary.Read(bytes.NewReader(data[58:60]), binary.BigEndian, &m.idle_timeout)
  binary.Read(bytes.NewReader(data[60:62]), binary.BigEndian, &m.hard_timeout)
  binary.Read(bytes.NewReader(data[62:64]), binary.BigEndian, &m.priority)
  binary.Read(bytes.NewReader(data[64:68]), binary.BigEndian, &m.buffer_id)
  binary.Read(bytes.NewReader(data[68:70]), binary.BigEndian, &m.out_port)
  binary.Read(bytes.NewReader(data[70:72]), binary.BigEndian, &m.flags)
// ignore actions for the moment
}

func (m flow_modify_strict) fillOutEvent(event *common.MapStr) {
  (*event)["match"] = m.match
  (*event)["cookie"] = m.cookie
  (*event)["_command"] = m._command
  (*event)["idle_timeout"] = m.idle_timeout
  (*event)["hard_timeout"] = m.hard_timeout
  (*event)["priority"] = m.priority
  (*event)["buffer_id"] = m.buffer_id
  (*event)["out_port"] = m.out_port
  (*event)["flags"] = m.flags.String()
  // ignore actions for the moment
}
type flow_removed struct {
  match match_v1
  cookie uint64
  priority uint16
  reason ofp_flow_removed_reason
  duration_sec uint32
  duration_nsec uint32
  idle_timeout uint16
  packet_count uint64
  byte_count uint64
}

func (m *flow_removed) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:48]), binary.BigEndian, &m.match)
  binary.Read(bytes.NewReader(data[48:56]), binary.BigEndian, &m.cookie)
  binary.Read(bytes.NewReader(data[56:58]), binary.BigEndian, &m.priority)
  binary.Read(bytes.NewReader(data[58:59]), binary.BigEndian, &m.reason)
  binary.Read(bytes.NewReader(data[60:64]), binary.BigEndian, &m.duration_sec)
  binary.Read(bytes.NewReader(data[64:68]), binary.BigEndian, &m.duration_nsec)
  binary.Read(bytes.NewReader(data[68:70]), binary.BigEndian, &m.idle_timeout)
  binary.Read(bytes.NewReader(data[72:80]), binary.BigEndian, &m.packet_count)
  binary.Read(bytes.NewReader(data[80:88]), binary.BigEndian, &m.byte_count)
}

func (m flow_removed) fillOutEvent(event *common.MapStr) {
  (*event)["match"] = m.match
  (*event)["cookie"] = m.cookie
  (*event)["priority"] = m.priority
  (*event)["reason"] = m.reason.String()
  (*event)["duration_sec"] = m.duration_sec
  (*event)["duration_nsec"] = m.duration_nsec
  (*event)["idle_timeout"] = m.idle_timeout
  (*event)["packet_count"] = m.packet_count
  (*event)["byte_count"] = m.byte_count
}
type flow_stats_entry struct {
  table_id uint8
  match match_v1
  duration_sec uint32
  duration_nsec uint32
  priority uint16
  idle_timeout uint16
  hard_timeout uint16
  cookie uint64
  packet_count uint64
  byte_count uint64
}

func (m *flow_stats_entry) parse(data []byte) {
  binary.Read(bytes.NewReader(data[2:3]), binary.BigEndian, &m.table_id)
  binary.Read(bytes.NewReader(data[4:44]), binary.BigEndian, &m.match)
  binary.Read(bytes.NewReader(data[44:48]), binary.BigEndian, &m.duration_sec)
  binary.Read(bytes.NewReader(data[48:52]), binary.BigEndian, &m.duration_nsec)
  binary.Read(bytes.NewReader(data[52:54]), binary.BigEndian, &m.priority)
  binary.Read(bytes.NewReader(data[54:56]), binary.BigEndian, &m.idle_timeout)
  binary.Read(bytes.NewReader(data[56:58]), binary.BigEndian, &m.hard_timeout)
  binary.Read(bytes.NewReader(data[64:72]), binary.BigEndian, &m.cookie)
  binary.Read(bytes.NewReader(data[72:80]), binary.BigEndian, &m.packet_count)
  binary.Read(bytes.NewReader(data[80:88]), binary.BigEndian, &m.byte_count)
// ignore actions for the moment
}

func (m flow_stats_entry) fillOutEvent(event *common.MapStr) {
  (*event)["table_id"] = m.table_id
  (*event)["match"] = m.match
  (*event)["duration_sec"] = m.duration_sec
  (*event)["duration_nsec"] = m.duration_nsec
  (*event)["priority"] = m.priority
  (*event)["idle_timeout"] = m.idle_timeout
  (*event)["hard_timeout"] = m.hard_timeout
  (*event)["cookie"] = m.cookie
  (*event)["packet_count"] = m.packet_count
  (*event)["byte_count"] = m.byte_count
  // ignore actions for the moment
}
type flow_stats_reply struct {
  stats_type uint16
  flags ofp_stats_reply_flags
}

func (m *flow_stats_reply) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.stats_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.flags)
// ignore entries for the moment
}

func (m flow_stats_reply) fillOutEvent(event *common.MapStr) {
  (*event)["stats_type"] = m.stats_type
  (*event)["flags"] = m.flags.String()
  // ignore entries for the moment
}
type flow_stats_request struct {
  stats_type uint16
  flags ofp_stats_request_flags
  match match_v1
  table_id uint8
  out_port uint16
}

func (m *flow_stats_request) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.stats_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.flags)
  binary.Read(bytes.NewReader(data[12:52]), binary.BigEndian, &m.match)
  binary.Read(bytes.NewReader(data[52:53]), binary.BigEndian, &m.table_id)
  binary.Read(bytes.NewReader(data[54:56]), binary.BigEndian, &m.out_port)
}

func (m flow_stats_request) fillOutEvent(event *common.MapStr) {
  (*event)["stats_type"] = m.stats_type
  (*event)["flags"] = m.flags
  (*event)["match"] = m.match
  (*event)["table_id"] = m.table_id
  (*event)["out_port"] = m.out_port
}
type get_config_reply struct {
  flags ofp_config_flags
  miss_send_len uint16
}

func (m *get_config_reply) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.flags)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.miss_send_len)
}

func (m get_config_reply) fillOutEvent(event *common.MapStr) {
  (*event)["flags"] = m.flags.String()
  (*event)["miss_send_len"] = m.miss_send_len
}
type get_config_request struct {
}

func (m *get_config_request) parse(data []byte) {
}

func (m get_config_request) fillOutEvent(event *common.MapStr) {
}
type hello struct {
}

func (m *hello) parse(data []byte) {
}

func (m hello) fillOutEvent(event *common.MapStr) {
}
type hello_failed_error_msg struct {
  err_type uint16
  code ofp_hello_failed_code
  data []byte
}

func (m *hello_failed_error_msg) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.err_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.code)
  binary.Read(bytes.NewReader(data[12:len(data)]), binary.BigEndian, &m.data)
}

func (m hello_failed_error_msg) fillOutEvent(event *common.MapStr) {
  (*event)["err_type"] = m.err_type
  (*event)["code"] = m.code.String()
}
type match_v1 struct {
  wildcards uint32
  in_port uint16
  eth_src [6]uint8
  eth_dst [6]uint8
  vlan_vid uint16
  vlan_pcp uint8
  eth_type uint16
  ip_dscp uint8
  ip_proto uint8
  ipv4_src [4]uint8
  ipv4_dst [4]uint8
  tcp_src uint16
  tcp_dst uint16
}

func (m *match_v1) parse(data []byte) {
// ignore wildcards for the moment
  binary.Read(bytes.NewReader(data[4:6]), binary.BigEndian, &m.in_port)
  binary.Read(bytes.NewReader(data[6:12]), binary.BigEndian, &m.eth_src)
  binary.Read(bytes.NewReader(data[12:18]), binary.BigEndian, &m.eth_dst)
  binary.Read(bytes.NewReader(data[18:20]), binary.BigEndian, &m.vlan_vid)
  binary.Read(bytes.NewReader(data[20:21]), binary.BigEndian, &m.vlan_pcp)
  binary.Read(bytes.NewReader(data[22:24]), binary.BigEndian, &m.eth_type)
  binary.Read(bytes.NewReader(data[24:25]), binary.BigEndian, &m.ip_dscp)
  binary.Read(bytes.NewReader(data[25:26]), binary.BigEndian, &m.ip_proto)
  binary.Read(bytes.NewReader(data[28:32]), binary.BigEndian, &m.ipv4_src)
  binary.Read(bytes.NewReader(data[32:36]), binary.BigEndian, &m.ipv4_dst)
  binary.Read(bytes.NewReader(data[36:38]), binary.BigEndian, &m.tcp_src)
  binary.Read(bytes.NewReader(data[38:40]), binary.BigEndian, &m.tcp_dst)
}

func (m match_v1) fillOutEvent(event *common.MapStr) {
  (*event)["wildcards"] = m.wildcards
  (*event)["in_port"] = m.in_port
  (*event)["eth_src"] = m.eth_src
  (*event)["eth_dst"] = m.eth_dst
  (*event)["vlan_vid"] = m.vlan_vid
  (*event)["vlan_pcp"] = m.vlan_pcp
  (*event)["eth_type"] = m.eth_type
  (*event)["ip_dscp"] = m.ip_dscp
  (*event)["ip_proto"] = m.ip_proto
  (*event)["ipv4_src"] = m.ipv4_src
  (*event)["ipv4_dst"] = m.ipv4_dst
  (*event)["tcp_src"] = m.tcp_src
  (*event)["tcp_dst"] = m.tcp_dst
}
type packet_in struct {
  buffer_id uint32
  total_len uint16
  in_port uint16
  reason ofp_packet_in_reason
  data []byte
}

func (m *packet_in) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:12]), binary.BigEndian, &m.buffer_id)
  binary.Read(bytes.NewReader(data[12:14]), binary.BigEndian, &m.total_len)
  binary.Read(bytes.NewReader(data[14:16]), binary.BigEndian, &m.in_port)
  binary.Read(bytes.NewReader(data[16:17]), binary.BigEndian, &m.reason)
  binary.Read(bytes.NewReader(data[18:len(data)]), binary.BigEndian, &m.data)
}

func (m packet_in) fillOutEvent(event *common.MapStr) {
  (*event)["buffer_id"] = m.buffer_id
  (*event)["total_len"] = m.total_len
  (*event)["in_port"] = m.in_port
  (*event)["reason"] = m.reason.String()
}
type packet_out struct {
  buffer_id uint32
  in_port uint16
  actions_len uint16
  data []byte
}

func (m *packet_out) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:12]), binary.BigEndian, &m.buffer_id)
  binary.Read(bytes.NewReader(data[12:14]), binary.BigEndian, &m.in_port)
  binary.Read(bytes.NewReader(data[14:16]), binary.BigEndian, &m.actions_len)
// ignore actions for the moment
// ignore data for the moment
}

func (m packet_out) fillOutEvent(event *common.MapStr) {
  (*event)["buffer_id"] = m.buffer_id
  (*event)["in_port"] = m.in_port
  (*event)["actions_len"] = m.actions_len
  // ignore actions for the moment
}
type packet_queue struct {
  queue_id uint32
  len uint16
}

func (m *packet_queue) parse(data []byte) {
// ignore queue_id for the moment
  binary.Read(bytes.NewReader(data[4:6]), binary.BigEndian, &m.len)
// ignore properties for the moment
}

func (m packet_queue) fillOutEvent(event *common.MapStr) {
  (*event)["queue_id"] = m.queue_id
  (*event)["len"] = m.len
  // ignore properties for the moment
}
type port_desc struct {
  port_no uint16
  hw_addr [6]uint8
  name [16]uint8
  config ofp_port_config
  state ofp_port_state
  curr ofp_port_features
  advertised ofp_port_features
  supported ofp_port_features
  peer ofp_port_features
}

func (m *port_desc) parse(data []byte) {
// ignore port_no for the moment
  binary.Read(bytes.NewReader(data[2:8]), binary.BigEndian, &m.hw_addr)
  binary.Read(bytes.NewReader(data[8:24]), binary.BigEndian, &m.name)
  binary.Read(bytes.NewReader(data[24:28]), binary.BigEndian, &m.config)
  binary.Read(bytes.NewReader(data[28:32]), binary.BigEndian, &m.state)
  binary.Read(bytes.NewReader(data[32:36]), binary.BigEndian, &m.curr)
  binary.Read(bytes.NewReader(data[36:40]), binary.BigEndian, &m.advertised)
  binary.Read(bytes.NewReader(data[40:44]), binary.BigEndian, &m.supported)
  binary.Read(bytes.NewReader(data[44:48]), binary.BigEndian, &m.peer)
}

func (m port_desc) fillOutEvent(event *common.MapStr) {
  (*event)["port_no"] = m.port_no
  (*event)["hw_addr"] = m.hw_addr
  (*event)["name"] = m.name
  (*event)["config"] = m.config.String()
  (*event)["state"] = m.state.String()
  (*event)["curr"] = m.curr.String()
  (*event)["advertised"] = m.advertised.String()
  (*event)["supported"] = m.supported.String()
  (*event)["peer"] = m.peer.String()
}
type port_mod struct {
  port_no uint16
  hw_addr [6]uint8
  config uint32
  mask uint32
  advertise uint32
}

func (m *port_mod) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.port_no)
  binary.Read(bytes.NewReader(data[10:16]), binary.BigEndian, &m.hw_addr)
  binary.Read(bytes.NewReader(data[16:20]), binary.BigEndian, &m.config)
  binary.Read(bytes.NewReader(data[20:24]), binary.BigEndian, &m.mask)
  binary.Read(bytes.NewReader(data[24:28]), binary.BigEndian, &m.advertise)
}

func (m port_mod) fillOutEvent(event *common.MapStr) {
  (*event)["port_no"] = m.port_no
  (*event)["hw_addr"] = m.hw_addr
  (*event)["config"] = m.config
  (*event)["mask"] = m.mask
  (*event)["advertise"] = m.advertise
}
type port_mod_failed_error_msg struct {
  err_type uint16
  code ofp_port_mod_failed_code
  data []byte
}

func (m *port_mod_failed_error_msg) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.err_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.code)
  binary.Read(bytes.NewReader(data[12:len(data)]), binary.BigEndian, &m.data)
}

func (m port_mod_failed_error_msg) fillOutEvent(event *common.MapStr) {
  (*event)["err_type"] = m.err_type
  (*event)["code"] = m.code.String()
}
type port_stats_entry struct {
  port_no uint16
  rx_packets uint64
  tx_packets uint64
  rx_bytes uint64
  tx_bytes uint64
  rx_dropped uint64
  tx_dropped uint64
  rx_errors uint64
  tx_errors uint64
  rx_frame_err uint64
  rx_over_err uint64
  rx_crc_err uint64
  collisions uint64
}

func (m *port_stats_entry) parse(data []byte) {
// ignore port_no for the moment
  binary.Read(bytes.NewReader(data[8:16]), binary.BigEndian, &m.rx_packets)
  binary.Read(bytes.NewReader(data[16:24]), binary.BigEndian, &m.tx_packets)
  binary.Read(bytes.NewReader(data[24:32]), binary.BigEndian, &m.rx_bytes)
  binary.Read(bytes.NewReader(data[32:40]), binary.BigEndian, &m.tx_bytes)
  binary.Read(bytes.NewReader(data[40:48]), binary.BigEndian, &m.rx_dropped)
  binary.Read(bytes.NewReader(data[48:56]), binary.BigEndian, &m.tx_dropped)
  binary.Read(bytes.NewReader(data[56:64]), binary.BigEndian, &m.rx_errors)
  binary.Read(bytes.NewReader(data[64:72]), binary.BigEndian, &m.tx_errors)
  binary.Read(bytes.NewReader(data[72:80]), binary.BigEndian, &m.rx_frame_err)
  binary.Read(bytes.NewReader(data[80:88]), binary.BigEndian, &m.rx_over_err)
  binary.Read(bytes.NewReader(data[88:96]), binary.BigEndian, &m.rx_crc_err)
  binary.Read(bytes.NewReader(data[96:104]), binary.BigEndian, &m.collisions)
}

func (m port_stats_entry) fillOutEvent(event *common.MapStr) {
  (*event)["port_no"] = m.port_no
  (*event)["rx_packets"] = m.rx_packets
  (*event)["tx_packets"] = m.tx_packets
  (*event)["rx_bytes"] = m.rx_bytes
  (*event)["tx_bytes"] = m.tx_bytes
  (*event)["rx_dropped"] = m.rx_dropped
  (*event)["tx_dropped"] = m.tx_dropped
  (*event)["rx_errors"] = m.rx_errors
  (*event)["tx_errors"] = m.tx_errors
  (*event)["rx_frame_err"] = m.rx_frame_err
  (*event)["rx_over_err"] = m.rx_over_err
  (*event)["rx_crc_err"] = m.rx_crc_err
  (*event)["collisions"] = m.collisions
}
type port_stats_reply struct {
  stats_type uint16
  flags ofp_stats_reply_flags
}

func (m *port_stats_reply) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.stats_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.flags)
// ignore entries for the moment
}

func (m port_stats_reply) fillOutEvent(event *common.MapStr) {
  (*event)["stats_type"] = m.stats_type
  (*event)["flags"] = m.flags.String()
  // ignore entries for the moment
}
type port_stats_request struct {
  stats_type uint16
  flags ofp_stats_request_flags
  port_no uint16
}

func (m *port_stats_request) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.stats_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.flags)
  binary.Read(bytes.NewReader(data[12:14]), binary.BigEndian, &m.port_no)
}

func (m port_stats_request) fillOutEvent(event *common.MapStr) {
  (*event)["stats_type"] = m.stats_type
  (*event)["flags"] = m.flags
  (*event)["port_no"] = m.port_no
}
type port_status struct {
  reason ofp_port_reason
  desc of_port_desc
}

func (m *port_status) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:9]), binary.BigEndian, &m.reason)
  binary.Read(bytes.NewReader(data[16:64]), binary.BigEndian, &m.desc)
}

func (m port_status) fillOutEvent(event *common.MapStr) {
  (*event)["reason"] = m.reason.String()
  (*event)["desc"] = m.desc
}
type queue_get_config_reply struct {
  port uint16
}

func (m *queue_get_config_reply) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.port)
// ignore queues for the moment
}

func (m queue_get_config_reply) fillOutEvent(event *common.MapStr) {
  (*event)["port"] = m.port
  // ignore queues for the moment
}
type queue_get_config_request struct {
  port uint16
}

func (m *queue_get_config_request) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.port)
}

func (m queue_get_config_request) fillOutEvent(event *common.MapStr) {
  (*event)["port"] = m.port
}
type queue_op_failed_error_msg struct {
  err_type uint16
  code ofp_queue_op_failed_code
  data []byte
}

func (m *queue_op_failed_error_msg) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.err_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.code)
  binary.Read(bytes.NewReader(data[12:len(data)]), binary.BigEndian, &m.data)
}

func (m queue_op_failed_error_msg) fillOutEvent(event *common.MapStr) {
  (*event)["err_type"] = m.err_type
  (*event)["code"] = m.code.String()
}
type queue_prop struct {
  len uint16
}

func (m *queue_prop) parse(data []byte) {
  binary.Read(bytes.NewReader(data[2:4]), binary.BigEndian, &m.len)
}

func (m queue_prop) fillOutEvent(event *common.MapStr) {
  (*event)["len"] = m.len
}
type queue_prop_min_rate struct {
  len uint16
  rate uint16
}

func (m *queue_prop_min_rate) parse(data []byte) {
  binary.Read(bytes.NewReader(data[2:4]), binary.BigEndian, &m.len)
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.rate)
}

func (m queue_prop_min_rate) fillOutEvent(event *common.MapStr) {
  (*event)["len"] = m.len
  (*event)["rate"] = m.rate
}
type queue_stats_entry struct {
  port_no uint16
  queue_id uint32
  tx_bytes uint64
  tx_packets uint64
  tx_errors uint64
}

func (m *queue_stats_entry) parse(data []byte) {
// ignore port_no for the moment
  binary.Read(bytes.NewReader(data[4:8]), binary.BigEndian, &m.queue_id)
  binary.Read(bytes.NewReader(data[8:16]), binary.BigEndian, &m.tx_bytes)
  binary.Read(bytes.NewReader(data[16:24]), binary.BigEndian, &m.tx_packets)
  binary.Read(bytes.NewReader(data[24:32]), binary.BigEndian, &m.tx_errors)
}

func (m queue_stats_entry) fillOutEvent(event *common.MapStr) {
  (*event)["port_no"] = m.port_no
  (*event)["queue_id"] = m.queue_id
  (*event)["tx_bytes"] = m.tx_bytes
  (*event)["tx_packets"] = m.tx_packets
  (*event)["tx_errors"] = m.tx_errors
}
type queue_stats_reply struct {
  stats_type uint16
  flags ofp_stats_reply_flags
}

func (m *queue_stats_reply) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.stats_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.flags)
// ignore entries for the moment
}

func (m queue_stats_reply) fillOutEvent(event *common.MapStr) {
  (*event)["stats_type"] = m.stats_type
  (*event)["flags"] = m.flags.String()
  // ignore entries for the moment
}
type queue_stats_request struct {
  stats_type uint16
  flags ofp_stats_request_flags
  port_no uint16
  queue_id uint32
}

func (m *queue_stats_request) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.stats_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.flags)
  binary.Read(bytes.NewReader(data[12:14]), binary.BigEndian, &m.port_no)
  binary.Read(bytes.NewReader(data[16:20]), binary.BigEndian, &m.queue_id)
}

func (m queue_stats_request) fillOutEvent(event *common.MapStr) {
  (*event)["stats_type"] = m.stats_type
  (*event)["flags"] = m.flags
  (*event)["port_no"] = m.port_no
  (*event)["queue_id"] = m.queue_id
}
type set_config struct {
  flags ofp_config_flags
  miss_send_len uint16
}

func (m *set_config) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.flags)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.miss_send_len)
}

func (m set_config) fillOutEvent(event *common.MapStr) {
  (*event)["flags"] = m.flags.String()
  (*event)["miss_send_len"] = m.miss_send_len
}
type table_mod struct {
  table_id uint8
  config uint32
}

func (m *table_mod) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:9]), binary.BigEndian, &m.table_id)
  binary.Read(bytes.NewReader(data[12:16]), binary.BigEndian, &m.config)
}

func (m table_mod) fillOutEvent(event *common.MapStr) {
  (*event)["table_id"] = m.table_id
  (*event)["config"] = m.config
}
type table_stats_entry struct {
  table_id uint8
  name [32]byte
  wildcards uint32
  max_entries uint32
  active_count uint32
  lookup_count uint64
  matched_count uint64
}

func (m *table_stats_entry) parse(data []byte) {
// ignore table_id for the moment
  binary.Read(bytes.NewReader(data[4:36]), binary.BigEndian, &m.name)
  binary.Read(bytes.NewReader(data[36:40]), binary.BigEndian, &m.wildcards)
  binary.Read(bytes.NewReader(data[40:44]), binary.BigEndian, &m.max_entries)
  binary.Read(bytes.NewReader(data[44:48]), binary.BigEndian, &m.active_count)
  binary.Read(bytes.NewReader(data[48:56]), binary.BigEndian, &m.lookup_count)
  binary.Read(bytes.NewReader(data[56:64]), binary.BigEndian, &m.matched_count)
}

func (m table_stats_entry) fillOutEvent(event *common.MapStr) {
  (*event)["table_id"] = m.table_id
  (*event)["name"] = m.name
  (*event)["wildcards"] = m.wildcards
  (*event)["max_entries"] = m.max_entries
  (*event)["active_count"] = m.active_count
  (*event)["lookup_count"] = m.lookup_count
  (*event)["matched_count"] = m.matched_count
}
type table_stats_reply struct {
  stats_type uint16
  flags ofp_stats_reply_flags
}

func (m *table_stats_reply) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.stats_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.flags)
// ignore entries for the moment
}

func (m table_stats_reply) fillOutEvent(event *common.MapStr) {
  (*event)["stats_type"] = m.stats_type
  (*event)["flags"] = m.flags.String()
  // ignore entries for the moment
}
type table_stats_request struct {
  stats_type uint16
  flags ofp_stats_request_flags
}

func (m *table_stats_request) parse(data []byte) {
  binary.Read(bytes.NewReader(data[8:10]), binary.BigEndian, &m.stats_type)
  binary.Read(bytes.NewReader(data[10:12]), binary.BigEndian, &m.flags)
}

func (m table_stats_request) fillOutEvent(event *common.MapStr) {
  (*event)["stats_type"] = m.stats_type
  (*event)["flags"] = m.flags
}
