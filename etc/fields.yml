version: 1.0

defaults:
  type: string
  required: false
  index: not_analyzed
  doc_values: true
  ignore_above: 1024

env:
  type: group
  description: >
      These fields contain data about the environment in which the
      transaction was captured.
  fields:
    - name: shipper
      description: >
          The name of the shipper that captured the transaction.

    - name: server
      description: >
        The name of the server that served the transaction.

    - name: client_server
      description: >
        The name of the server that initiated the transaction.

    - name: service
      description: >
        The name of the logical service that served the transaction.

    - name: client_service
      description: >
        The name of the logical service that initiated the transaction.

    - name: ip
      description: >
        The IP address of the server that served the transaction.
      format: dotted notation.

    - name: client_ip
      description: >
        The IP address of the server that initiated the transaction.
      format: dotted notation.

    - name: real_ip
      description: >
        If the server initiating the transaction is a proxy, this field
        contains the original client IP address.
        For HTTP, for example, the IP address extracted from a configurable
        HTTP header, by default `X-Forwarded-For`.

        Unless this field is disabled, it always has a value and it matches
        the `client_ip` for non proxy clients.
      format: Dotted notation.

    - name: client_location
      type: geo_point
      example: "40.715, -74.011"
      description: >
        The GeoIP location of the `real_ip` IP address or of the
        `client_ip` address if the `real_ip` is disabled. The field is a string
        containg the latitude and longitude separated by a coma.

    - name: client_port
      description: >
        The layer 4 port of the process that initiated the transaction.
      format: dotted notation.

    - name: port
      description: >
        The layer 4 port of the process that served the transaction.
      format: dotted notation.

    - name: proc
      description: >
        The name of the process that served the transaction.

    - name: client_proc
      description: >
        The name of the process that initiated the transaction.

    - name: release
      description: >
        The software release of the service serving the transaction.
        This can be the commit id or a semantic version.

    - name: tags
      description: >
        Arbitrary tags that can be set per shipper and per transaction
        type.

event:
  type: group
  description: >
    These fields contained data about the transaction itself.
  fields:
    - name: "timestamp"
      type: date
      required: true
      format: YYYY-MM-DDTHH:MM:SS.milliZ
      example: 2015-01-24T14:06:05.071Z
      description: >
        The timestamp of the event, as measured either by the shipper or
        by a common collector point. The precision is in milliseconds.
        The timezone is UTC.

    - name: type
      description: >
        The type of the transaction (e.g. HTTP, MySQL, Redis, RUM)
      required: true

    - name: count
      type: int
      description: >
        For how many transactions is this event representative. This
        is generally the inverse of the sampling rate. For example, for
        a sample rate of 1/10, the count is 10. The count is used by the
        UIs to return estimated values.
      required: true

    - name: status
      description: >
        High level status of the transaction. The way to compute this
        value depends on the protocol, but the result has a meaning
        independent a meaning independent of the protocol.
      required: true
      possible_values:
        - OK
        - Error
        - Server Error
        - Client Error

    - name: method
      description: >
        The command/verb/method of the transaction. For HTTP, this is the
        method name (GET, POST, PUT, etc.), for SQL this is the verb (SELECT,
        UPDATE, DELETE, etc.).

    - name: resource
      description: >
        The logical resource that this transaction refers to. For HTTP, this is
        the URL path up to the last /. For example, if the URL is `/users/1`,
        the resource is `/users`. For databases, the resource is typically the
        table name. The field is not filled for all transaction types.

    - name: path
      required: true
      description: >
        The path to which the transaction refers to. For HTTP, this is the URL.
        For SQL databases, this is the table name. For key-value stores, this
        is the key.

    - name: query
      type: string
      ignore_above: 0
      index: not_analyzed
      doc_values: true
      description: >
        The query in a human readable form. For HTTP, it will typically be
        something like `GET /users/_search?name=test`. For MySQL, it is
        something like `SELECT id from users where name=test`.

    - name: params
      index: analyzed
      description: >
        The request parameters. For HTTP, these are the POST or GET parameters.
        For Thrift-RPC, these are the parameters from the request.

    - name: notes
      description: >
        Messages from Packetbeat itself. This usually contains error messages for
        interpreting the raw data which can be helpful for troubleshooting.

    - name: http
      type: group
      description: HTTP specific event fields.
      fields:
        - name: http.code
          description: HTTP status code.
          example: 404

        - name: http.phrase
          description: HTTP status phrase.
          example: Not found.

        - name: http.request_headers
          type: dict
          description: >
            A map containing the captured header fields from the request. Which
            headers to capture is configurable. If more headers with the same
            header name are present in the message, they will be separated by
            comas.

        - name: http.response_headers
          type: dict
          description: >
            A map containing the captured header fields from the response.
            Which headers to capture is configurable. If more headers with the
            same header name are present in the message, they will be separated
            by comas.

        - name: http.content_length
          type: int
          description: >
            The value of the Content-Length header if present.

    - name: mysql
      type: group
      description: MySQL specific event fields.
      fields:
        - name: mysql.iserror
          type: bool
          description: >
            In case the MySQL query returns an error, this field is set to true.

        - name: mysql.affected_rows
          type: int
          description: >
            In case of a successful MySQL command, it contains the affected
            number of rows of the last statement.

        - name: mysql.insert_id
          description: >
            In case of a successful ``INSERT`` query, it contains the id of the
            newly inserted row.

        - name: mysql.num_fields
          description: >
            In case of a successful ``SELECT`` query, it is set to the number
            of fields returned.

        - name: mysql.num_rows
          description: >
            In case of a successful ``SELECT`` query, it is set to the number
            of rows returned.

        - name: mysql.query
          description: >
            The row mysql query as read from the transaction's request.

        - name: mysql.error_code
          type: int
          description: >
            The error code returned by MySQL.

        - name: mysql.error_message
          description: >
            The error info message returned by MySQL.

    - name: pgsql
      type: group
      description: PostgreSQL specific event fields.
      fields:
        - name: pgsql.query
          description: >
            The row pgsql query as read from the transaction's request.

        - name: pgsql.iserror
          type: bool
          description: >
            In case the PgSQL query returns an error, this field is set to true.

        - name: pgsql.error_code
          description: The PostgreSQL error code.
          type: int

        - name: pgsql.error_message
          description: The PostgreSQL error message.

        - name: pgsql.error_severity
          description: The PostgreSQL error severity.
          possible_values:
            - ERROR
            - FATAL
            - PANIC

        - name: pgsql.num_fields
          description: >
            In case of a successful ``SELECT`` query, it is set to the number
            of fields returned.

        - name: pgsql.num_rows
          description: >
            In case of a successful ``SELECT`` query, it is set to the number
            of rows returned.

    - name: thrift
      type: group
      description: Thrift-RPC specific event fields.
      fields:
        - name: thrift.params
          description: >
            The RPC method call parameters in human readable format. If the IDL
            files are available, the parameters are using names whenever possible.
            Otherwise, the IDs from the message are used.

        - name: thrift.service
          description: >
            The name of the Thrift-RPC service as defined in the IDL files.

        - name: thrift.return_value
          description: >
            The value returned by the Thrift-RPC call. This is encoded in a human
            readable way.

        - name: thrift.exceptions
          description: >
            If the call resulted in exceptions, this field contains them in a human
            readable form

    - name: redis
      type: group
      description: Redis specific event fields.
      fields:
        - name: redis.return_value
          description: >
            The return value of the Redis command in human readable form.

        - name: redis.error
          description: >
            If the Redis command has resulted in an error, this field contains the
            error message as returned by the Redis server.

    - name: mongodb
      type: group
      description: >
         MongoDB specific event fields. These fields mirror closely
         the fields for the MongoDB wire protocol. The higher level fields
         (e.g. `query`, `resource`) apply to MongoDB events as well.
      fields:
        - name: mongodb.error
          description: >
            If the MongoDB request has resulted in an error, this field contains the
            error message as returned by the server.
        - name: mongodb.fullCollectionName
          description: >
            The full collection name.
            The full collection name is the concatenation of the database name with the collection name,
            using a . for the concatenation.
            For example, for the database foo and the collection bar, the full collection name is foo.bar.
        - name: mongodb.numberToSkip
          type: number
          description: >
            Sets the number of documents to omit - starting from the first document in the resulting dataset -
            when returning the result of the query.
        - name: mongodb.numberToReturn
          type: number
          description: >
            The requested maximum number of documents to be returned.
        - name: mongodb.numberReturned
          type: number
          description: >
            Number of documents in the reply
        - name: mongodb.startingFrom
          description: >
            Where in the cursor this reply is starting
        - name: mongodb.query
          description: >
            JSON document that represents the query.
            The query will contain one or more elements, all of which must match for a document
            to be included in the result set.
            Possible elements include $query, $orderby, $hint, $explain, and $snapshot.
        - name: mongodb.returnFieldsSelector
          description: >
            JSON document that limits the fields in the returned documents.
            The returnFieldsSelector contains one or more elements, each of which is the name of a field that should be returned,
            and and the integer value 1.
        - name: mongodb.selector
          description: >
            BSON document that specifies the query for selection of the document to update or delete.
        - name: mongodb.update
          description: >
            BSON document that specifies the update to be performed.
            For information on specifying updates see the Update Operations documentation from the MongoDB Manual.
        - name: mongodb.cursorId
          description: >
            Cursor identifier that came in the OP_REPLY. This must be the value that came from the database.

    - name: openflow
      type: group
      description: OpenFlow specific event fields.
      fields:
        - name: openflow.version
          type: string
          description: >
            The OpenFlow protocol version
        - name: openflow.type
          type: string
          description: >
            The OpenFlow message Type
        - name: openflow.transaction_id
          type: string
          description: >
            The OpenFlow transaction id
raw:
  type: group
  description: These fields contain the raw transaction data.
  fields:
    - name: request
      index: analyzed
      description: >
        For text protocols, this is the request as seen on the wire
        (application layer only). For binary protocols this is our
        representation of the request.

    - name: response
      index: analyzed
      description: >
        For text protocols, this is the response as seen on the wire
        (application layer only). For binary protocols this is our
        representation of the request.

measurements:
  type: group
  description: >
    These fields contain measurements related to the transaction.
  fields:
    - name: responsetime
      description: >
        The wall clock time it took to for the transaction to complete.
        The precision is in microseconds.
      type: int

    - name: cpu_time
      description: The CPU time it took to complete the transaction.
      type: int

    - name: bytes_in
      description: >
        The number of bytes of the request. Note that this size is
        the application layer message length, without the length of IP or
        TCP headers.
      type: int

    - name: bytes_out
      description: >
        The number of bytes of the response. Note that this size is
        the application layer message length, without the length of IP or
        TCP headers.
      type: int

    - name: dnstime
      type: int
      description: >
        The time it takes to query the name server for a given request.
        This is typically used for RUM (real-user-monitoring) but can
        also have values for server to server communication when DNS
        is used for service discovery.
        The precision is in microseconds.

    - name: connecttime
      type: int
      description: >
        The time it takes for the TCP connection to be established for
        the given transaction.
        The precision is in microseconds.

    - name: loadtime
      type: int
      description: >
        The time it takes for the content to be loaded. This is typically
        used for RUM (real-user-monitoring) but it can make sense in other
        cases as well.
        The precision is in microseconds.

    - name: domloadtime
      type: int
      description: >
        In RUM (real-user-monitoring), the total time it takes for the
        DOM to be loaded. In terms of W3 Navigation Timing API, this is
        the difference between `domContentLoadedEnd` and
        `domContentLoadedStart`.
